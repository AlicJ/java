
public class Paths {
	private boolean[] marked;
	private int[] edgeTo;
	private final int s;
	
	public Paths(Graph G, int s) {
		marked = new boolean[G.V()];
		edgeTo = new int[G.V()];
		dfs(G, s);
	}
	
	private void dfs(Graph G, int v) {
		marked[v] = true;
		count ++;
		for (int w: G.adj(v)) {
			if (!marked[w]){
				edgeTo[w] = v;
				dfs(G, w);
			}
		}
	}
	
	public boolean hasPathTo(int w) {
		return marked[w];
	}
	
	public Iterable
}
